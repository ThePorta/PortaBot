package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AccountAndInputData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AccountAddress":
			z.AccountAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccountAddress")
				return
			}
		case "TargetContract":
			z.TargetContract, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TargetContract")
				return
			}
		case "InputData":
			z.InputData, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "InputData")
				return
			}
		case "ChainId":
			z.ChainId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ChainId")
				return
			}
		case "ChainName":
			z.ChainName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ChainName")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AccountAndInputData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "AccountAddress"
	err = en.Append(0x85, 0xae, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccountAddress)
	if err != nil {
		err = msgp.WrapError(err, "AccountAddress")
		return
	}
	// write "TargetContract"
	err = en.Append(0xae, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.TargetContract)
	if err != nil {
		err = msgp.WrapError(err, "TargetContract")
		return
	}
	// write "InputData"
	err = en.Append(0xa9, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.InputData)
	if err != nil {
		err = msgp.WrapError(err, "InputData")
		return
	}
	// write "ChainId"
	err = en.Append(0xa7, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ChainId)
	if err != nil {
		err = msgp.WrapError(err, "ChainId")
		return
	}
	// write "ChainName"
	err = en.Append(0xa9, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ChainName)
	if err != nil {
		err = msgp.WrapError(err, "ChainName")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AccountAndInputData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "AccountAddress"
	o = append(o, 0x85, 0xae, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.AccountAddress)
	// string "TargetContract"
	o = append(o, 0xae, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74)
	o = msgp.AppendString(o, z.TargetContract)
	// string "InputData"
	o = append(o, 0xa9, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendString(o, z.InputData)
	// string "ChainId"
	o = append(o, 0xa7, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64)
	o = msgp.AppendInt(o, z.ChainId)
	// string "ChainName"
	o = append(o, 0xa9, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.ChainName)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountAndInputData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AccountAddress":
			z.AccountAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountAddress")
				return
			}
		case "TargetContract":
			z.TargetContract, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetContract")
				return
			}
		case "InputData":
			z.InputData, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InputData")
				return
			}
		case "ChainId":
			z.ChainId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChainId")
				return
			}
		case "ChainName":
			z.ChainName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChainName")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AccountAndInputData) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.AccountAddress) + 15 + msgp.StringPrefixSize + len(z.TargetContract) + 10 + msgp.StringPrefixSize + len(z.InputData) + 8 + msgp.IntSize + 10 + msgp.StringPrefixSize + len(z.ChainName)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SetChatIdRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Otp":
			z.Otp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Otp")
				return
			}
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SetChatIdRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Otp"
	err = en.Append(0x82, 0xa3, 0x4f, 0x74, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Otp)
	if err != nil {
		err = msgp.WrapError(err, "Otp")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SetChatIdRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Otp"
	o = append(o, 0x82, 0xa3, 0x4f, 0x74, 0x70)
	o = msgp.AppendString(o, z.Otp)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SetChatIdRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Otp":
			z.Otp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Otp")
				return
			}
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SetChatIdRequest) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Otp) + 8 + msgp.StringPrefixSize + len(z.Address)
	return
}
